CREATE SEQUENCE DEPT_SEQ
/

CREATE SEQUENCE TB_CTT_DESCRIPTION_SEQ
/

CREATE SEQUENCE TB_NTT_DESCRIPTION_LOG_SEQ
/

CREATE SEQUENCE DANE_SEQ start with 1 increment by 1;
/

CREATE TABLE DEPT
(
  DEPTNO       NUMBER(2) NOT NULL
    PRIMARY KEY,
  DNAME        VARCHAR2(14),
  LOC          VARCHAR2(13),
  COMPLETED_BY VARCHAR2(100)
)
/

CREATE OR REPLACE TRIGGER DEPT_TRG1
  BEFORE INSERT
  ON DEPT
  FOR EACH ROW
  BEGIN
    IF :new.deptno IS NULL
    THEN
      SELECT dept_seq.nextval
      INTO :new.deptno
      FROM sys.dual;
    END IF;
  END;
/


CREATE TABLE DANE
(
  ID_NUMBER             VARCHAR2(100),
  CLOSE_DATE            DATE,
  X_AREA                VARCHAR2(100),
  X_REGION              VARCHAR2(100),
  X_INTERNAL_SLA        VARCHAR2(100),
  CREATED               DATE,
  AC                    VARCHAR2(100),
  AC_FIN                VARCHAR2(100),
  NTT_ID                VARCHAR2(100),
  NTT_REASON            VARCHAR2(100),
  NTT_SEVERITY          VARCHAR2(100),
  STATUS                VARCHAR2(100),
  STATUS_FIN            VARCHAR2(100),
  CITY                  VARCHAR2(100),
  VOIVODESHIP_16        VARCHAR2(100),
  VOIVODESHIP_49        VARCHAR2(100),
  CLIENT_NAME           VARCHAR2(200),
  CUSTOMER_SEG          VARCHAR2(100),
  CAPITAL_GROUP         VARCHAR2(100),
  TOTT_TOP              VARCHAR2(100),
  X_VIP_ATTITUDE        VARCHAR2(100),
  X_CATHEGORY_DESC      VARCHAR2(100),
  CUPII                 NUMBER,
  TECHNOLOGY            VARCHAR2(100),
  INSTANCE_NAME         VARCHAR2(100),
  SERVICE               VARCHAR2(100),
  CONSTRAIN_FOR_N       VARCHAR2(100),
  CONSTRAIN_FOR_N_FIN   VARCHAR2(100),
  SLA_FOR_KPI_N         VARCHAR2(100),
  SLA_FOR_KPI_D         VARCHAR2(100),
  CUSTOMER_SLA          VARCHAR2(100),
  SOLVED                DATE,
  ABSOLUTE_TIME         NUMBER,
  UNAVAIABLE_TIME       NUMBER,
  RELATIVE_TIME_X_5     NUMBER,
  RELATIVE_TIME_X_5_NEW NUMBER,
  RELATIVE_TIME_X_6     NUMBER,
  RELATIVE_TIME_X_6_NEW NUMBER,
  RELATIVE_TIME_X_7     NUMBER,
  RELATIVE_TIME_X_7_NEW NUMBER,
  TIME_OF_REACTION      NUMBER,
  FIELD                 VARCHAR2(100),
  X_PROBLEM_DESC        VARCHAR2(100),
  X_PROBLEM_TYPE        VARCHAR2(100),
  X_CLOSE_CODE          VARCHAR2(100),
  X_CLOSE_CODE_DESC     VARCHAR2(400),
  KPI_SLA_N             NUMBER,
  KPI_SLA_N_FIN         NUMBER,
  KPI_SLA_D             NUMBER,
  KPI_SLA_D_FIN         NUMBER,
  KPI_SLA_CUSTOMER      NUMBER,
  WHO_FIN               VARCHAR2(100),
  WHO                   VARCHAR2(100),
  TREP                  NUMBER,
  ACTIVATION            NUMBER,
  CLOSE_DAY             DATE,
  CONSTRAIN_FOR_D_FIN   VARCHAR2(100),
  CONSTRAIN_FOR_D       VARCHAR2(100),
  KPI_24_7              NUMBER,
  KPI_24_7_STAR         NUMBER,
  RESPONSIBLE           VARCHAR2(100),
  NR                    NUMBER DEFAULT dane_seq.nextval
)
/

CREATE TABLE TB_CTT_DESCRIPTION
(
  ID          NUMBER       NOT NULL
    CONSTRAINT TB_CTT_DESCRIPTION_PK
    PRIMARY KEY,
  TYPE        VARCHAR2(200),
  STATUS      VARCHAR2(50),
  NTT_NUMBER  VARCHAR2(50) NOT NULL
    CONSTRAINT TB_CTT_DESCRIPTION_CON
    UNIQUE,
  DESCRIPTION CLOB,
  CHANGED_BY  VARCHAR2(200) DEFAULT 'SYSTEM_USEER',
  WHEN        DATE          DEFAULT SYSDATE
)
/

CREATE OR REPLACE TRIGGER BI_TB_CTT_DESCRIPTION
  BEFORE INSERT
  ON TB_CTT_DESCRIPTION
  FOR EACH ROW
  BEGIN
    IF :NEW."ID" IS NULL
    THEN
      SELECT "TB_CTT_DESCRIPTION_SEQ".nextval
      INTO :NEW."ID"
      FROM sys.dual;
    END IF;
  END;
/

CREATE TABLE TB_NTT_DATA
(
  NTT_ID       VARCHAR2(100),
  NTT_REASON   VARCHAR2(100),
  NTT_SEVERITY VARCHAR2(100),
  STATUS       VARCHAR2(100)
)
/

CREATE TABLE TB_NTT_DESCRIPTION_LOG
(
  ID              NUMBER        NOT NULL
    CONSTRAINT TB_NTT_DESCRIPTION_LOG_PK
    PRIMARY KEY,
  LOG2DESCRIPTION NUMBER,
  CHANGED_BY      VARCHAR2(100) NOT NULL,
  FULL_LOG        CLOB,
  WHEN            DATE DEFAULT sysdate
)
/

CREATE OR REPLACE TRIGGER BI_TB_NTT_DESCRIPTION_LOG
  BEFORE INSERT
  ON TB_NTT_DESCRIPTION_LOG
  FOR EACH ROW
  BEGIN
    IF :NEW."ID" IS NULL
    THEN
      SELECT "TB_NTT_DESCRIPTION_LOG_SEQ".nextval
      INTO :NEW."ID"
      FROM sys.dual;
    END IF;
  END;
/

CREATE OR REPLACE TRIGGER TB_CTT_DESCRIPTION_T1
  BEFORE UPDATE
  ON TB_CTT_DESCRIPTION
  FOR EACH ROW
  BEGIN
    DECLARE
      v_status_changed VARCHAR2(2000);
    BEGIN
      IF :OLD.status != :NEW.status
      THEN
        v_status_changed := 'changed STATUS: ' || 'from ' || :OLD.status || ' into ' || :NEW.status || ' on ' ||
                            to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss');
        INSERT INTO TB_NTT_DESCRIPTION_LOG (LOG2DESCRIPTION, CHANGED_BY, FULL_LOG)
        VALUES (:OLD.id, :NEW.changed_by, v_status_changed);
      END IF;
    END;
  END;
/


